apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'org.eclipse.keyple'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.diffplug.gradle.spotless'

group groupId
archivesBaseName = artifactId
sourceCompatibility = javaSourceLevel

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// copy license file from root folder to each generated artifact
task copyLICENSE(type: Copy) {
    from file("${projectDir}/LICENSE")
    into file("${buildDir}/resources/main/META-INF/")
}

// copy notice file from root folder to each generated artifact
task copyNOTICE(type: Copy) {
    from file("${projectDir}/NOTICE.md")
    into file("${buildDir}/resources/main/META-INF/")
}

classes.dependsOn copyLICENSE, copyNOTICE

// declare manifest
jar {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.version
    }
}

// generate sources jar
task generateSourcesJar(type: Jar, dependsOn : classes) {
    group 'keyple'
    classifier = 'sources'
    from sourceSets.main.output, sourceSets.main.java
}

// Javadoc generation
// Copy static custom files (logo)
javadoc {
    doLast {
        copy {
            from "src/main/javadoc/images"
            into "$project.buildDir/docs/javadoc/images"
            include "*.png"
        }
    }
}
// Generate javadoc jar
task generateJavadocJar(type: Jar, dependsOn: javadoc) {
    group 'keyple'
    classifier = 'javadoc'
    javadoc.options.encoding = 'UTF-8'
    from javadoc.destinationDir
    javadoc.options.overview = "src/main/javadoc/overview.html"
    javadoc.options.setUse(true) // adds the "use" link to the navigation bar
    javadoc.options.setStylesheetFile(file("src/main/javadoc/keyple-stylesheet.css"))
    javadoc.options.setWindowTitle(project.description + " - " + project.version)
    javadoc.options.setDocTitle(project.description + " - " + project.version)
    javadoc.options.setHeader("<a target=\"_parent\" href=\"https://keyple.org/\"><img src=\"{@docRoot}/images/keyple.png\" height=\"20px\" style=\"background-color: white; padding: 3px; margin: 0 10px -7px 3px;\"/></a><span style=\"line-height: 30px\"> " + project.description + " - " + project.version + "</span>")
    javadoc.options.setFooter("Copyright &copy; Eclipse Foundation, Inc. All Rights Reserved.")
}

// publish javadoc, sources and jar
artifacts {
    archives generateSourcesJar, generateJavadocJar
}

// sign if needed (based on the doSign variable)
if (project.getProperties().containsKey("doSign") && doSign=="true") {
    apply plugin: 'signing'
    ext."signing.keyId" = "0C140E36"
    //other properties are defined in the gradle.properties
    signing {
        sign configurations.archives
    }
}

repositories {
    mavenLocal()
    maven {
        url 'https://repo.eclipse.org/service/local/repositories/maven_central/content'
    }
    //to import keyple snapshots
    maven {url 'https://oss.sonatype.org/content/repositories/snapshots' }
    //to import keyple releases
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    //mavenCentral()
    google()
    jcenter()
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        //use a mirror of maven_central to speed up CI build
        maven {
            url 'https://repo.eclipse.org/service/local/repositories/maven_central/content'
        }
        mavenCentral()
        maven {url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.14.0"
        classpath 'org.eclipse.keyple:keyple-gradle:0.1.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "org.jacoco:org.jacoco.core:0.8.5"
        classpath "org.jacoco:org.jacoco.agent:0.8.5"
    }
}

// define local or remote upload repository (based on the doSign variable)
/* from https://central.sonatype.org/pages/gradle.html */
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.getProperties().containsKey("doSign") && doSign=="true") {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }else {
                repository(url: mavenLocal().url)
            }
        }
    }
}

// overwrite pom definition values
uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name artifactId
                description project.description
                url "https://projects.eclipse.org/projects/iot.keyple"
                organization("Eclipse Keyple"){
                    name "Eclipse Keyple"
                    url "https://projects.eclipse.org/projects/iot.keyple"
                }
                scm {
                    connection "scm:git:git://github.com/eclipse/${artifactId}.git"
                    developerConnection "scm:git:https://github.com/eclipse/${artifactId}.git"
                    url "http://github.com/eclipse/${artifactId}/tree/main"
                }
                licenses {
                    license {
                        name 'Eclipse Public License - v 2.0'
                        url 'https://www.eclipse.org/legal/epl-2.0/'
                    }
                }
                developers {
                    developer {
                        name 'Olivier Delcroix'
                        email 'odelcroi@gmail.com'
                    }
                    developer {
                        name 'Jean-Pierre Fortune'
                        email 'jean-pierre.fortune@ialto.com'
                    }
                    developer {
                        name 'Andrei Cristea'
                        email 'andrei.cristea@armotic.fr'
                    }
                    developer {
                        name 'Pierre Terr√©e'
                        email 'pierre.terree@calypsonet.org'
                    }
                }
                // dependencies mapping is defined manually
                pom.scopeMappings.with {
                    mappings.clear()
                    addMapping(1, configurations.api, 'compile')
                    addMapping(2, configurations.implementation, 'compile')
                    addMapping(3, configurations.testImplementation, 'test')
                }
            }
        }
    }
}

task installArtifact {
    group 'keyple'
    description "Builds and installs the ${artifactId} artifact into maven local repository"
    dependsOn uploadArchives
    doLast {
        println "${artifactId} artifact ${project.version} has been installed into maven local repo at path : " + project.getRepositories().get(0).getAt("url")
    }
}

task removeArtifact(type: Delete) {
    group 'keyple'
    def path = new URL(project.getRepositories().get(0).getAt("url").toString() + "org/eclipse/keyple/" + artifactId);
    description "Removes all ${artifactId} artifacts deployed in maven local repo at path: ${path}"
    delete path
    doLast {
        println description
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "eclipse_keyple-${sonarProjectKey}"
        property "sonar.organization", "eclipse"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv('SONAR_LOGIN')
        property "sonar.branch.name", System.getenv('BRANCH_NAME')
    }
}

task analyzeCodeQuality {
    group 'keyple'
    description 'Analyse code and send results to Sonar'
    dependsOn installArtifact
    dependsOn sonarqube
    doLast {
        println 'Keyple code has been analysed and result was sent to SonarQube.'
    }
}

spotless {
    java {
        target "java/**/*.java"
        licenseHeaderFile 'spotless.license.txt'
        importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''
        removeUnusedImports()
        googleJavaFormat()
    }
    format 'misc', {
        target 'java/**/*.java', 'java/**/*.gradle', 'java/**/*.yml', 'java/**/*.md'
        indentWithSpaces()
        endWithNewline()
    }
}
